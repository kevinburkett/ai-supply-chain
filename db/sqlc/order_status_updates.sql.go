// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order_status_updates.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addOrderStatusUpdate = `-- name: AddOrderStatusUpdate :one
INSERT INTO order_status_updates (id, order_id, status)
VALUES ($1, $2, $3)
RETURNING id, order_id, status, created_at
`

type AddOrderStatusUpdateParams struct {
	ID      uuid.UUID
	OrderID uuid.NullUUID
	Status  string
}

func (q *Queries) AddOrderStatusUpdate(ctx context.Context, arg AddOrderStatusUpdateParams) (OrderStatusUpdate, error) {
	row := q.db.QueryRowContext(ctx, addOrderStatusUpdate, arg.ID, arg.OrderID, arg.Status)
	var i OrderStatusUpdate
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listOrderStatusUpdates = `-- name: ListOrderStatusUpdates :many
SELECT id, order_id, status, created_at FROM order_status_updates
WHERE order_id = $1
ORDER BY created_at
`

func (q *Queries) ListOrderStatusUpdates(ctx context.Context, orderID uuid.NullUUID) ([]OrderStatusUpdate, error) {
	rows, err := q.db.QueryContext(ctx, listOrderStatusUpdates, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderStatusUpdate
	for rows.Next() {
		var i OrderStatusUpdate
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
