// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: orders.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (id, product_id, quantity, status, delay_risk)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, product_id, quantity, status, delay_risk, created_at
`

type CreateOrderParams struct {
	ID        uuid.UUID
	ProductID uuid.NullUUID
	Quantity  int32
	Status    string
	DelayRisk sql.NullFloat64
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.ID,
		arg.ProductID,
		arg.Quantity,
		arg.Status,
		arg.DelayRisk,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Quantity,
		&i.Status,
		&i.DelayRisk,
		&i.CreatedAt,
	)
	return i, err
}

const getOrder = `-- name: GetOrder :one
SELECT id, product_id, quantity, status, delay_risk, created_at FROM orders WHERE id = $1
`

func (q *Queries) GetOrder(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Quantity,
		&i.Status,
		&i.DelayRisk,
		&i.CreatedAt,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, product_id, quantity, status, delay_risk, created_at FROM orders ORDER BY created_at DESC
`

func (q *Queries) ListOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Quantity,
			&i.Status,
			&i.DelayRisk,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders
SET status = $2, delay_risk = $3
WHERE id = $1
RETURNING id, product_id, quantity, status, delay_risk, created_at
`

type UpdateOrderStatusParams struct {
	ID        uuid.UUID
	Status    string
	DelayRisk sql.NullFloat64
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrderStatus, arg.ID, arg.Status, arg.DelayRisk)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Quantity,
		&i.Status,
		&i.DelayRisk,
		&i.CreatedAt,
	)
	return i, err
}
